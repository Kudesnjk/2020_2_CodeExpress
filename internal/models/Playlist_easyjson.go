// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBa59a6baDecodeGithubComGoParkMailRu20202CodeExpressInternalModels(in *jlexer.Lexer, out *Playlists) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Playlists, 0, 8)
			} else {
				*out = Playlists{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *Playlist
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Playlist)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBa59a6baEncodeGithubComGoParkMailRu20202CodeExpressInternalModels(out *jwriter.Writer, in Playlists) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Playlists) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBa59a6baEncodeGithubComGoParkMailRu20202CodeExpressInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Playlists) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBa59a6baEncodeGithubComGoParkMailRu20202CodeExpressInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Playlists) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBa59a6baDecodeGithubComGoParkMailRu20202CodeExpressInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Playlists) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBa59a6baDecodeGithubComGoParkMailRu20202CodeExpressInternalModels(l, v)
}
func easyjsonBa59a6baDecodeGithubComGoParkMailRu20202CodeExpressInternalModels1(in *jlexer.Lexer, out *Playlist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "poster":
			out.Poster = string(in.String())
		case "tracks":
			if in.IsNull() {
				in.Skip()
				out.Tracks = nil
			} else {
				in.Delim('[')
				if out.Tracks == nil {
					if !in.IsDelim(']') {
						out.Tracks = make([]*Track, 0, 8)
					} else {
						out.Tracks = []*Track{}
					}
				} else {
					out.Tracks = (out.Tracks)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Track
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Track)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Tracks = append(out.Tracks, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_public":
			out.IsPublic = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBa59a6baEncodeGithubComGoParkMailRu20202CodeExpressInternalModels1(out *jwriter.Writer, in Playlist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"tracks\":"
		out.RawString(prefix)
		if in.Tracks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Tracks {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Playlist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBa59a6baEncodeGithubComGoParkMailRu20202CodeExpressInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Playlist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBa59a6baEncodeGithubComGoParkMailRu20202CodeExpressInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Playlist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBa59a6baDecodeGithubComGoParkMailRu20202CodeExpressInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Playlist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBa59a6baDecodeGithubComGoParkMailRu20202CodeExpressInternalModels1(l, v)
}
