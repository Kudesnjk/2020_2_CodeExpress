// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson31469aafDecodeGithubComGoParkMailRu20202CodeExpressInternalModels(in *jlexer.Lexer, out *Tracks) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Tracks, 0, 8)
			} else {
				*out = Tracks{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *Track
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Track)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31469aafEncodeGithubComGoParkMailRu20202CodeExpressInternalModels(out *jwriter.Writer, in Tracks) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Tracks) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31469aafEncodeGithubComGoParkMailRu20202CodeExpressInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tracks) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31469aafEncodeGithubComGoParkMailRu20202CodeExpressInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tracks) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31469aafDecodeGithubComGoParkMailRu20202CodeExpressInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tracks) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31469aafDecodeGithubComGoParkMailRu20202CodeExpressInternalModels(l, v)
}
func easyjson31469aafDecodeGithubComGoParkMailRu20202CodeExpressInternalModels1(in *jlexer.Lexer, out *Track) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		case "album_poster":
			out.AlbumPoster = string(in.String())
		case "album_id":
			out.AlbumID = uint64(in.Uint64())
		case "index":
			out.Index = uint8(in.Uint8())
		case "audio":
			out.Audio = string(in.String())
		case "artist":
			out.Artist = string(in.String())
		case "artist_id":
			out.ArtistID = uint64(in.Uint64())
		case "is_favorite":
			out.IsFavorite = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31469aafEncodeGithubComGoParkMailRu20202CodeExpressInternalModels1(out *jwriter.Writer, in Track) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"album_poster\":"
		out.RawString(prefix)
		out.String(string(in.AlbumPoster))
	}
	{
		const prefix string = ",\"album_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AlbumID))
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Index))
	}
	{
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		out.String(string(in.Audio))
	}
	{
		const prefix string = ",\"artist\":"
		out.RawString(prefix)
		out.String(string(in.Artist))
	}
	{
		const prefix string = ",\"artist_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ArtistID))
	}
	{
		const prefix string = ",\"is_favorite\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFavorite))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Track) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31469aafEncodeGithubComGoParkMailRu20202CodeExpressInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Track) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31469aafEncodeGithubComGoParkMailRu20202CodeExpressInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Track) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31469aafDecodeGithubComGoParkMailRu20202CodeExpressInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Track) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31469aafDecodeGithubComGoParkMailRu20202CodeExpressInternalModels1(l, v)
}
