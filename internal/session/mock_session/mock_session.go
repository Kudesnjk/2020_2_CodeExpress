// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_CodeExpress/internal/session (interfaces: SessionRep,SessionUsecase)

// Package mock_session is a generated GoMock package.
package mock_session

import (
	models "github.com/go-park-mail-ru/2020_2_CodeExpress/internal/models"
	error_response "github.com/go-park-mail-ru/2020_2_CodeExpress/internal/tools/error_response"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSessionRep is a mock of SessionRep interface
type MockSessionRep struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepMockRecorder
}

// MockSessionRepMockRecorder is the mock recorder for MockSessionRep
type MockSessionRepMockRecorder struct {
	mock *MockSessionRep
}

// NewMockSessionRep creates a new mock instance
func NewMockSessionRep(ctrl *gomock.Controller) *MockSessionRep {
	mock := &MockSessionRep{ctrl: ctrl}
	mock.recorder = &MockSessionRepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionRep) EXPECT() *MockSessionRepMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockSessionRep) Delete(arg0 *models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSessionRepMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionRep)(nil).Delete), arg0)
}

// Insert mocks base method
func (m *MockSessionRep) Insert(arg0 *models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockSessionRepMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSessionRep)(nil).Insert), arg0)
}

// SelectById mocks base method
func (m *MockSessionRep) SelectById(arg0 string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectById", arg0)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectById indicates an expected call of SelectById
func (mr *MockSessionRepMockRecorder) SelectById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectById", reflect.TypeOf((*MockSessionRep)(nil).SelectById), arg0)
}

// MockSessionUsecase is a mock of SessionUsecase interface
type MockSessionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSessionUsecaseMockRecorder
}

// MockSessionUsecaseMockRecorder is the mock recorder for MockSessionUsecase
type MockSessionUsecaseMockRecorder struct {
	mock *MockSessionUsecase
}

// NewMockSessionUsecase creates a new mock instance
func NewMockSessionUsecase(ctrl *gomock.Controller) *MockSessionUsecase {
	mock := &MockSessionUsecase{ctrl: ctrl}
	mock.recorder = &MockSessionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionUsecase) EXPECT() *MockSessionUsecaseMockRecorder {
	return m.recorder
}

// CreateSession mocks base method
func (m *MockSessionUsecase) CreateSession(arg0 *models.Session) *error_response.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0)
	ret0, _ := ret[0].(*error_response.ErrorResponse)
	return ret0
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockSessionUsecaseMockRecorder) CreateSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionUsecase)(nil).CreateSession), arg0)
}

// DeleteSession mocks base method
func (m *MockSessionUsecase) DeleteSession(arg0 *models.Session) *error_response.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0)
	ret0, _ := ret[0].(*error_response.ErrorResponse)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockSessionUsecaseMockRecorder) DeleteSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionUsecase)(nil).DeleteSession), arg0)
}

// GetByID mocks base method
func (m *MockSessionUsecase) GetByID(arg0 string) (*models.Session, *error_response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(*error_response.ErrorResponse)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockSessionUsecaseMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSessionUsecase)(nil).GetByID), arg0)
}
