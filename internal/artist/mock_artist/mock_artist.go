// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_CodeExpress/internal/artist (interfaces: ArtistRep,ArtistUsecase)

// Package mock_artist is a generated GoMock package.
package mock_artist

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2020_2_CodeExpress/internal/models"
	error_response "github.com/go-park-mail-ru/2020_2_CodeExpress/internal/tools/error_response"
	gomock "github.com/golang/mock/gomock"
)

// MockArtistRep is a mock of ArtistRep interface
type MockArtistRep struct {
	ctrl     *gomock.Controller
	recorder *MockArtistRepMockRecorder
}

// MockArtistRepMockRecorder is the mock recorder for MockArtistRep
type MockArtistRepMockRecorder struct {
	mock *MockArtistRep
}

// NewMockArtistRep creates a new mock instance
func NewMockArtistRep(ctrl *gomock.Controller) *MockArtistRep {
	mock := &MockArtistRep{ctrl: ctrl}
	mock.recorder = &MockArtistRepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArtistRep) EXPECT() *MockArtistRepMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockArtistRep) Delete(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockArtistRepMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArtistRep)(nil).Delete), arg0)
}

// Insert mocks base method
func (m *MockArtistRep) Insert(arg0 *models.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockArtistRepMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockArtistRep)(nil).Insert), arg0)
}

// SelectByID mocks base method
func (m *MockArtistRep) SelectByID(arg0 uint64) (*models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", arg0)
	ret0, _ := ret[0].(*models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID
func (mr *MockArtistRepMockRecorder) SelectByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockArtistRep)(nil).SelectByID), arg0)
}

// SelectByName mocks base method
func (m *MockArtistRep) SelectByName(arg0 string) (*models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByName", arg0)
	ret0, _ := ret[0].(*models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByName indicates an expected call of SelectByName
func (mr *MockArtistRepMockRecorder) SelectByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByName", reflect.TypeOf((*MockArtistRep)(nil).SelectByName), arg0)
}

// SelectByParam mocks base method
func (m *MockArtistRep) SelectByParam(arg0, arg1 uint64) ([]*models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByParam", arg0, arg1)
	ret0, _ := ret[0].([]*models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByParam indicates an expected call of SelectByParam
func (mr *MockArtistRepMockRecorder) SelectByParam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByParam", reflect.TypeOf((*MockArtistRep)(nil).SelectByParam), arg0, arg1)
}

// Update mocks base method
func (m *MockArtistRep) Update(arg0 *models.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockArtistRepMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArtistRep)(nil).Update), arg0)
}

// MockArtistUsecase is a mock of ArtistUsecase interface
type MockArtistUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockArtistUsecaseMockRecorder
}

// MockArtistUsecaseMockRecorder is the mock recorder for MockArtistUsecase
type MockArtistUsecaseMockRecorder struct {
	mock *MockArtistUsecase
}

// NewMockArtistUsecase creates a new mock instance
func NewMockArtistUsecase(ctrl *gomock.Controller) *MockArtistUsecase {
	mock := &MockArtistUsecase{ctrl: ctrl}
	mock.recorder = &MockArtistUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArtistUsecase) EXPECT() *MockArtistUsecaseMockRecorder {
	return m.recorder
}

// CreateArtist mocks base method
func (m *MockArtistUsecase) CreateArtist(arg0 *models.Artist) *error_response.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtist", arg0)
	ret0, _ := ret[0].(*error_response.ErrorResponse)
	return ret0
}

// CreateArtist indicates an expected call of CreateArtist
func (mr *MockArtistUsecaseMockRecorder) CreateArtist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtist", reflect.TypeOf((*MockArtistUsecase)(nil).CreateArtist), arg0)
}

// DeleteArtist mocks base method
func (m *MockArtistUsecase) DeleteArtist(arg0 uint64) *error_response.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtist", arg0)
	ret0, _ := ret[0].(*error_response.ErrorResponse)
	return ret0
}

// DeleteArtist indicates an expected call of DeleteArtist
func (mr *MockArtistUsecaseMockRecorder) DeleteArtist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtist", reflect.TypeOf((*MockArtistUsecase)(nil).DeleteArtist), arg0)
}

// GetByID mocks base method
func (m *MockArtistUsecase) GetByID(arg0 uint64) (*models.Artist, *error_response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*models.Artist)
	ret1, _ := ret[1].(*error_response.ErrorResponse)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockArtistUsecaseMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockArtistUsecase)(nil).GetByID), arg0)
}

// GetByName mocks base method
func (m *MockArtistUsecase) GetByName(arg0 string) (*models.Artist, *error_response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].(*models.Artist)
	ret1, _ := ret[1].(*error_response.ErrorResponse)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockArtistUsecaseMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockArtistUsecase)(nil).GetByName), arg0)
}

// GetByParams mocks base method
func (m *MockArtistUsecase) GetByParams(arg0, arg1 uint64) ([]*models.Artist, *error_response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParams", arg0, arg1)
	ret0, _ := ret[0].([]*models.Artist)
	ret1, _ := ret[1].(*error_response.ErrorResponse)
	return ret0, ret1
}

// GetByParams indicates an expected call of GetByParams
func (mr *MockArtistUsecaseMockRecorder) GetByParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParams", reflect.TypeOf((*MockArtistUsecase)(nil).GetByParams), arg0, arg1)
}

// UpdateArtist mocks base method
func (m *MockArtistUsecase) UpdateArtist(arg0 *models.Artist) *error_response.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArtist", arg0)
	ret0, _ := ret[0].(*error_response.ErrorResponse)
	return ret0
}

// UpdateArtist indicates an expected call of UpdateArtist
func (mr *MockArtistUsecaseMockRecorder) UpdateArtist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArtist", reflect.TypeOf((*MockArtistUsecase)(nil).UpdateArtist), arg0)
}
