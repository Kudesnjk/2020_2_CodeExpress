// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: track.proto

package proto_track

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TrackID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *TrackID) Reset() {
	*x = TrackID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackID) ProtoMessage() {}

func (x *TrackID) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackID.ProtoReflect.Descriptor instead.
func (*TrackID) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{0}
}

func (x *TrackID) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type UserID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *UserID) Reset() {
	*x = UserID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserID) ProtoMessage() {}

func (x *UserID) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserID.ProtoReflect.Descriptor instead.
func (*UserID) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{1}
}

func (x *UserID) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetByIdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId uint64 `protobuf:"varint,1,opt,name=TrackId,proto3" json:"TrackId,omitempty"`
	UserId  uint64 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *GetByIdMessage) Reset() {
	*x = GetByIdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIdMessage) ProtoMessage() {}

func (x *GetByIdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIdMessage.ProtoReflect.Descriptor instead.
func (*GetByIdMessage) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{2}
}

func (x *GetByIdMessage) GetTrackId() uint64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

func (x *GetByIdMessage) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetByArtistIdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistID uint64 `protobuf:"varint,1,opt,name=ArtistID,proto3" json:"ArtistID,omitempty"`
	UserID   uint64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetByArtistIdMessage) Reset() {
	*x = GetByArtistIdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByArtistIdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByArtistIdMessage) ProtoMessage() {}

func (x *GetByArtistIdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByArtistIdMessage.ProtoReflect.Descriptor instead.
func (*GetByArtistIdMessage) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{3}
}

func (x *GetByArtistIdMessage) GetArtistID() uint64 {
	if x != nil {
		return x.ArtistID
	}
	return 0
}

func (x *GetByArtistIdMessage) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type GetByAlbumIdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumId uint64 `protobuf:"varint,1,opt,name=AlbumId,proto3" json:"AlbumId,omitempty"`
	UserId  uint64 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *GetByAlbumIdMessage) Reset() {
	*x = GetByAlbumIdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByAlbumIdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByAlbumIdMessage) ProtoMessage() {}

func (x *GetByAlbumIdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByAlbumIdMessage.ProtoReflect.Descriptor instead.
func (*GetByAlbumIdMessage) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{4}
}

func (x *GetByAlbumIdMessage) GetAlbumId() uint64 {
	if x != nil {
		return x.AlbumId
	}
	return 0
}

func (x *GetByAlbumIdMessage) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetByPlaylistIdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistId uint64 `protobuf:"varint,1,opt,name=PlaylistId,proto3" json:"PlaylistId,omitempty"`
	UserId     uint64 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *GetByPlaylistIdMessage) Reset() {
	*x = GetByPlaylistIdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByPlaylistIdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByPlaylistIdMessage) ProtoMessage() {}

func (x *GetByPlaylistIdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByPlaylistIdMessage.ProtoReflect.Descriptor instead.
func (*GetByPlaylistIdMessage) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{5}
}

func (x *GetByPlaylistIdMessage) GetPlaylistId() uint64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

func (x *GetByPlaylistIdMessage) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type AlbumID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *AlbumID) Reset() {
	*x = AlbumID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumID) ProtoMessage() {}

func (x *AlbumID) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumID.ProtoReflect.Descriptor instead.
func (*AlbumID) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{6}
}

func (x *AlbumID) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type PlaylistID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *PlaylistID) Reset() {
	*x = PlaylistID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistID) ProtoMessage() {}

func (x *PlaylistID) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistID.ProtoReflect.Descriptor instead.
func (*PlaylistID) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{7}
}

func (x *PlaylistID) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetByParamsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Count  uint64 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	From   uint64 `protobuf:"varint,3,opt,name=From,proto3" json:"From,omitempty"`
}

func (x *GetByParamsMessage) Reset() {
	*x = GetByParamsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByParamsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByParamsMessage) ProtoMessage() {}

func (x *GetByParamsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByParamsMessage.ProtoReflect.Descriptor instead.
func (*GetByParamsMessage) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{8}
}

func (x *GetByParamsMessage) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GetByParamsMessage) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetByParamsMessage) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

type GetTopByParamsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Count  uint64 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	From   uint64 `protobuf:"varint,3,opt,name=From,proto3" json:"From,omitempty"`
}

func (x *GetTopByParamsMessage) Reset() {
	*x = GetTopByParamsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopByParamsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopByParamsMessage) ProtoMessage() {}

func (x *GetTopByParamsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopByParamsMessage.ProtoReflect.Descriptor instead.
func (*GetTopByParamsMessage) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{9}
}

func (x *GetTopByParamsMessage) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GetTopByParamsMessage) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetTopByParamsMessage) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

type Favorites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	TrackID uint64 `protobuf:"varint,2,opt,name=TrackID,proto3" json:"TrackID,omitempty"`
}

func (x *Favorites) Reset() {
	*x = Favorites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Favorites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Favorites) ProtoMessage() {}

func (x *Favorites) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Favorites.ProtoReflect.Descriptor instead.
func (*Favorites) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{10}
}

func (x *Favorites) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Favorites) GetTrackID() uint64 {
	if x != nil {
		return x.TrackID
	}
	return 0
}

type Likes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  uint64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TrackId uint64 `protobuf:"varint,2,opt,name=TrackId,proto3" json:"TrackId,omitempty"`
}

func (x *Likes) Reset() {
	*x = Likes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Likes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Likes) ProtoMessage() {}

func (x *Likes) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Likes.ProtoReflect.Descriptor instead.
func (*Likes) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{11}
}

func (x *Likes) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Likes) GetTrackId() uint64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

type Nothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Nothing) Reset() {
	*x = Nothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nothing) ProtoMessage() {}

func (x *Nothing) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nothing.ProtoReflect.Descriptor instead.
func (*Nothing) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{12}
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Duration    int64  `protobuf:"varint,3,opt,name=Duration,proto3" json:"Duration,omitempty"`
	AlbumPoster string `protobuf:"bytes,4,opt,name=AlbumPoster,proto3" json:"AlbumPoster,omitempty"`
	AlbumID     uint64 `protobuf:"varint,5,opt,name=AlbumID,proto3" json:"AlbumID,omitempty"`
	Index       uint32 `protobuf:"varint,6,opt,name=Index,proto3" json:"Index,omitempty"`
	Audio       string `protobuf:"bytes,7,opt,name=Audio,proto3" json:"Audio,omitempty"`
	Artist      string `protobuf:"bytes,8,opt,name=Artist,proto3" json:"Artist,omitempty"`
	ArtistID    uint64 `protobuf:"varint,9,opt,name=ArtistID,proto3" json:"ArtistID,omitempty"`
	IsFavorite  bool   `protobuf:"varint,10,opt,name=IsFavorite,proto3" json:"IsFavorite,omitempty"`
	IsLiked     bool   `protobuf:"varint,11,opt,name=IsLiked,proto3" json:"IsLiked,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{13}
}

func (x *Track) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Track) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Track) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Track) GetAlbumPoster() string {
	if x != nil {
		return x.AlbumPoster
	}
	return ""
}

func (x *Track) GetAlbumID() uint64 {
	if x != nil {
		return x.AlbumID
	}
	return 0
}

func (x *Track) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Track) GetAudio() string {
	if x != nil {
		return x.Audio
	}
	return ""
}

func (x *Track) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *Track) GetArtistID() uint64 {
	if x != nil {
		return x.ArtistID
	}
	return 0
}

func (x *Track) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *Track) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

type Tracks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks []*Track `protobuf:"bytes,1,rep,name=Tracks,proto3" json:"Tracks,omitempty"`
}

func (x *Tracks) Reset() {
	*x = Tracks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracks) ProtoMessage() {}

func (x *Tracks) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracks.ProtoReflect.Descriptor instead.
func (*Tracks) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{14}
}

func (x *Tracks) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

var File_track_proto protoreflect.FileDescriptor

var file_track_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x19, 0x0a, 0x07, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x44, 0x22, 0x18, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x42, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x47, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x07, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x44, 0x22, 0x1c, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x59, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x3d, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x22, 0x09, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x9f, 0x02, 0x0a, 0x05,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x22, 0x34, 0x0a,
	0x06, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x32, 0xda, 0x07, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4e,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x45, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x12,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x12, 0x43, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x42, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x1a,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0f, 0x41,
	0x64, 0x64, 0x54, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x1a, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x35, 0x0a, 0x09, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4e,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_track_proto_rawDescOnce sync.Once
	file_track_proto_rawDescData = file_track_proto_rawDesc
)

func file_track_proto_rawDescGZIP() []byte {
	file_track_proto_rawDescOnce.Do(func() {
		file_track_proto_rawDescData = protoimpl.X.CompressGZIP(file_track_proto_rawDescData)
	})
	return file_track_proto_rawDescData
}

var file_track_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_track_proto_goTypes = []interface{}{
	(*TrackID)(nil),                // 0: proto_track.TrackID
	(*UserID)(nil),                 // 1: proto_track.UserID
	(*GetByIdMessage)(nil),         // 2: proto_track.GetByIdMessage
	(*GetByArtistIdMessage)(nil),   // 3: proto_track.GetByArtistIdMessage
	(*GetByAlbumIdMessage)(nil),    // 4: proto_track.GetByAlbumIdMessage
	(*GetByPlaylistIdMessage)(nil), // 5: proto_track.GetByPlaylistIdMessage
	(*AlbumID)(nil),                // 6: proto_track.AlbumID
	(*PlaylistID)(nil),             // 7: proto_track.PlaylistID
	(*GetByParamsMessage)(nil),     // 8: proto_track.GetByParamsMessage
	(*GetTopByParamsMessage)(nil),  // 9: proto_track.GetTopByParamsMessage
	(*Favorites)(nil),              // 10: proto_track.Favorites
	(*Likes)(nil),                  // 11: proto_track.Likes
	(*Nothing)(nil),                // 12: proto_track.Nothing
	(*Track)(nil),                  // 13: proto_track.Track
	(*Tracks)(nil),                 // 14: proto_track.Tracks
}
var file_track_proto_depIdxs = []int32{
	13, // 0: proto_track.Tracks.Tracks:type_name -> proto_track.Track
	13, // 1: proto_track.TrackService.CreateTrack:input_type -> proto_track.Track
	0,  // 2: proto_track.TrackService.DeleteTrack:input_type -> proto_track.TrackID
	3,  // 3: proto_track.TrackService.GetByArtistId:input_type -> proto_track.GetByArtistIdMessage
	4,  // 4: proto_track.TrackService.GetByAlbumID:input_type -> proto_track.GetByAlbumIdMessage
	2,  // 5: proto_track.TrackService.GetByID:input_type -> proto_track.GetByIdMessage
	8,  // 6: proto_track.TrackService.GetByParams:input_type -> proto_track.GetByParamsMessage
	9,  // 7: proto_track.TrackService.GetTopByParams:input_type -> proto_track.GetTopByParamsMessage
	1,  // 8: proto_track.TrackService.GetFavoritesByUserID:input_type -> proto_track.UserID
	13, // 9: proto_track.TrackService.UpdateTrack:input_type -> proto_track.Track
	13, // 10: proto_track.TrackService.UpdateTrackAudio:input_type -> proto_track.Track
	10, // 11: proto_track.TrackService.AddToFavourites:input_type -> proto_track.Favorites
	10, // 12: proto_track.TrackService.DeleteFromFavourites:input_type -> proto_track.Favorites
	5,  // 13: proto_track.TrackService.GetByPlaylistID:input_type -> proto_track.GetByPlaylistIdMessage
	11, // 14: proto_track.TrackService.LikeTrack:input_type -> proto_track.Likes
	11, // 15: proto_track.TrackService.DislikeTrack:input_type -> proto_track.Likes
	13, // 16: proto_track.TrackService.CreateTrack:output_type -> proto_track.Track
	12, // 17: proto_track.TrackService.DeleteTrack:output_type -> proto_track.Nothing
	14, // 18: proto_track.TrackService.GetByArtistId:output_type -> proto_track.Tracks
	14, // 19: proto_track.TrackService.GetByAlbumID:output_type -> proto_track.Tracks
	13, // 20: proto_track.TrackService.GetByID:output_type -> proto_track.Track
	14, // 21: proto_track.TrackService.GetByParams:output_type -> proto_track.Tracks
	14, // 22: proto_track.TrackService.GetTopByParams:output_type -> proto_track.Tracks
	14, // 23: proto_track.TrackService.GetFavoritesByUserID:output_type -> proto_track.Tracks
	12, // 24: proto_track.TrackService.UpdateTrack:output_type -> proto_track.Nothing
	12, // 25: proto_track.TrackService.UpdateTrackAudio:output_type -> proto_track.Nothing
	12, // 26: proto_track.TrackService.AddToFavourites:output_type -> proto_track.Nothing
	12, // 27: proto_track.TrackService.DeleteFromFavourites:output_type -> proto_track.Nothing
	14, // 28: proto_track.TrackService.GetByPlaylistID:output_type -> proto_track.Tracks
	12, // 29: proto_track.TrackService.LikeTrack:output_type -> proto_track.Nothing
	12, // 30: proto_track.TrackService.DislikeTrack:output_type -> proto_track.Nothing
	16, // [16:31] is the sub-list for method output_type
	1,  // [1:16] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_track_proto_init() }
func file_track_proto_init() {
	if File_track_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_track_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByArtistIdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByAlbumIdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByPlaylistIdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByParamsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopByParamsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Favorites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Likes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_track_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_track_proto_goTypes,
		DependencyIndexes: file_track_proto_depIdxs,
		MessageInfos:      file_track_proto_msgTypes,
	}.Build()
	File_track_proto = out.File
	file_track_proto_rawDesc = nil
	file_track_proto_goTypes = nil
	file_track_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TrackServiceClient is the client API for TrackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrackServiceClient interface {
	CreateTrack(ctx context.Context, in *Track, opts ...grpc.CallOption) (*Track, error)
	DeleteTrack(ctx context.Context, in *TrackID, opts ...grpc.CallOption) (*Nothing, error)
	GetByArtistId(ctx context.Context, in *GetByArtistIdMessage, opts ...grpc.CallOption) (*Tracks, error)
	GetByAlbumID(ctx context.Context, in *GetByAlbumIdMessage, opts ...grpc.CallOption) (*Tracks, error)
	GetByID(ctx context.Context, in *GetByIdMessage, opts ...grpc.CallOption) (*Track, error)
	GetByParams(ctx context.Context, in *GetByParamsMessage, opts ...grpc.CallOption) (*Tracks, error)
	GetTopByParams(ctx context.Context, in *GetTopByParamsMessage, opts ...grpc.CallOption) (*Tracks, error)
	GetFavoritesByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Tracks, error)
	UpdateTrack(ctx context.Context, in *Track, opts ...grpc.CallOption) (*Nothing, error)
	UpdateTrackAudio(ctx context.Context, in *Track, opts ...grpc.CallOption) (*Nothing, error)
	AddToFavourites(ctx context.Context, in *Favorites, opts ...grpc.CallOption) (*Nothing, error)
	DeleteFromFavourites(ctx context.Context, in *Favorites, opts ...grpc.CallOption) (*Nothing, error)
	GetByPlaylistID(ctx context.Context, in *GetByPlaylistIdMessage, opts ...grpc.CallOption) (*Tracks, error)
	LikeTrack(ctx context.Context, in *Likes, opts ...grpc.CallOption) (*Nothing, error)
	DislikeTrack(ctx context.Context, in *Likes, opts ...grpc.CallOption) (*Nothing, error)
}

type trackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackServiceClient(cc grpc.ClientConnInterface) TrackServiceClient {
	return &trackServiceClient{cc}
}

func (c *trackServiceClient) CreateTrack(ctx context.Context, in *Track, opts ...grpc.CallOption) (*Track, error) {
	out := new(Track)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/CreateTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) DeleteTrack(ctx context.Context, in *TrackID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/DeleteTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetByArtistId(ctx context.Context, in *GetByArtistIdMessage, opts ...grpc.CallOption) (*Tracks, error) {
	out := new(Tracks)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/GetByArtistId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetByAlbumID(ctx context.Context, in *GetByAlbumIdMessage, opts ...grpc.CallOption) (*Tracks, error) {
	out := new(Tracks)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/GetByAlbumID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetByID(ctx context.Context, in *GetByIdMessage, opts ...grpc.CallOption) (*Track, error) {
	out := new(Track)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetByParams(ctx context.Context, in *GetByParamsMessage, opts ...grpc.CallOption) (*Tracks, error) {
	out := new(Tracks)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/GetByParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetTopByParams(ctx context.Context, in *GetTopByParamsMessage, opts ...grpc.CallOption) (*Tracks, error) {
	out := new(Tracks)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/GetTopByParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetFavoritesByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Tracks, error) {
	out := new(Tracks)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/GetFavoritesByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) UpdateTrack(ctx context.Context, in *Track, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/UpdateTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) UpdateTrackAudio(ctx context.Context, in *Track, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/UpdateTrackAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) AddToFavourites(ctx context.Context, in *Favorites, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/AddToFavourites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) DeleteFromFavourites(ctx context.Context, in *Favorites, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/DeleteFromFavourites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetByPlaylistID(ctx context.Context, in *GetByPlaylistIdMessage, opts ...grpc.CallOption) (*Tracks, error) {
	out := new(Tracks)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/GetByPlaylistID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) LikeTrack(ctx context.Context, in *Likes, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/LikeTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) DislikeTrack(ctx context.Context, in *Likes, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/proto_track.TrackService/DislikeTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackServiceServer is the server API for TrackService service.
type TrackServiceServer interface {
	CreateTrack(context.Context, *Track) (*Track, error)
	DeleteTrack(context.Context, *TrackID) (*Nothing, error)
	GetByArtistId(context.Context, *GetByArtistIdMessage) (*Tracks, error)
	GetByAlbumID(context.Context, *GetByAlbumIdMessage) (*Tracks, error)
	GetByID(context.Context, *GetByIdMessage) (*Track, error)
	GetByParams(context.Context, *GetByParamsMessage) (*Tracks, error)
	GetTopByParams(context.Context, *GetTopByParamsMessage) (*Tracks, error)
	GetFavoritesByUserID(context.Context, *UserID) (*Tracks, error)
	UpdateTrack(context.Context, *Track) (*Nothing, error)
	UpdateTrackAudio(context.Context, *Track) (*Nothing, error)
	AddToFavourites(context.Context, *Favorites) (*Nothing, error)
	DeleteFromFavourites(context.Context, *Favorites) (*Nothing, error)
	GetByPlaylistID(context.Context, *GetByPlaylistIdMessage) (*Tracks, error)
	LikeTrack(context.Context, *Likes) (*Nothing, error)
	DislikeTrack(context.Context, *Likes) (*Nothing, error)
}

// UnimplementedTrackServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTrackServiceServer struct {
}

func (*UnimplementedTrackServiceServer) CreateTrack(context.Context, *Track) (*Track, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrack not implemented")
}
func (*UnimplementedTrackServiceServer) DeleteTrack(context.Context, *TrackID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrack not implemented")
}
func (*UnimplementedTrackServiceServer) GetByArtistId(context.Context, *GetByArtistIdMessage) (*Tracks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByArtistId not implemented")
}
func (*UnimplementedTrackServiceServer) GetByAlbumID(context.Context, *GetByAlbumIdMessage) (*Tracks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAlbumID not implemented")
}
func (*UnimplementedTrackServiceServer) GetByID(context.Context, *GetByIdMessage) (*Track, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (*UnimplementedTrackServiceServer) GetByParams(context.Context, *GetByParamsMessage) (*Tracks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByParams not implemented")
}
func (*UnimplementedTrackServiceServer) GetTopByParams(context.Context, *GetTopByParamsMessage) (*Tracks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopByParams not implemented")
}
func (*UnimplementedTrackServiceServer) GetFavoritesByUserID(context.Context, *UserID) (*Tracks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoritesByUserID not implemented")
}
func (*UnimplementedTrackServiceServer) UpdateTrack(context.Context, *Track) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrack not implemented")
}
func (*UnimplementedTrackServiceServer) UpdateTrackAudio(context.Context, *Track) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrackAudio not implemented")
}
func (*UnimplementedTrackServiceServer) AddToFavourites(context.Context, *Favorites) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToFavourites not implemented")
}
func (*UnimplementedTrackServiceServer) DeleteFromFavourites(context.Context, *Favorites) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromFavourites not implemented")
}
func (*UnimplementedTrackServiceServer) GetByPlaylistID(context.Context, *GetByPlaylistIdMessage) (*Tracks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPlaylistID not implemented")
}
func (*UnimplementedTrackServiceServer) LikeTrack(context.Context, *Likes) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTrack not implemented")
}
func (*UnimplementedTrackServiceServer) DislikeTrack(context.Context, *Likes) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikeTrack not implemented")
}

func RegisterTrackServiceServer(s *grpc.Server, srv TrackServiceServer) {
	s.RegisterService(&_TrackService_serviceDesc, srv)
}

func _TrackService_CreateTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Track)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).CreateTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/CreateTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).CreateTrack(ctx, req.(*Track))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_DeleteTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).DeleteTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/DeleteTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).DeleteTrack(ctx, req.(*TrackID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_GetByArtistId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByArtistIdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).GetByArtistId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/GetByArtistId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).GetByArtistId(ctx, req.(*GetByArtistIdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_GetByAlbumID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAlbumIdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).GetByAlbumID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/GetByAlbumID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).GetByAlbumID(ctx, req.(*GetByAlbumIdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).GetByID(ctx, req.(*GetByIdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_GetByParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByParamsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).GetByParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/GetByParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).GetByParams(ctx, req.(*GetByParamsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_GetTopByParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopByParamsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).GetTopByParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/GetTopByParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).GetTopByParams(ctx, req.(*GetTopByParamsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_GetFavoritesByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).GetFavoritesByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/GetFavoritesByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).GetFavoritesByUserID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_UpdateTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Track)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).UpdateTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/UpdateTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).UpdateTrack(ctx, req.(*Track))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_UpdateTrackAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Track)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).UpdateTrackAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/UpdateTrackAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).UpdateTrackAudio(ctx, req.(*Track))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_AddToFavourites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Favorites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).AddToFavourites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/AddToFavourites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).AddToFavourites(ctx, req.(*Favorites))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_DeleteFromFavourites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Favorites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).DeleteFromFavourites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/DeleteFromFavourites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).DeleteFromFavourites(ctx, req.(*Favorites))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_GetByPlaylistID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByPlaylistIdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).GetByPlaylistID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/GetByPlaylistID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).GetByPlaylistID(ctx, req.(*GetByPlaylistIdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_LikeTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Likes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).LikeTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/LikeTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).LikeTrack(ctx, req.(*Likes))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_DislikeTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Likes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).DislikeTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_track.TrackService/DislikeTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).DislikeTrack(ctx, req.(*Likes))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_track.TrackService",
	HandlerType: (*TrackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrack",
			Handler:    _TrackService_CreateTrack_Handler,
		},
		{
			MethodName: "DeleteTrack",
			Handler:    _TrackService_DeleteTrack_Handler,
		},
		{
			MethodName: "GetByArtistId",
			Handler:    _TrackService_GetByArtistId_Handler,
		},
		{
			MethodName: "GetByAlbumID",
			Handler:    _TrackService_GetByAlbumID_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _TrackService_GetByID_Handler,
		},
		{
			MethodName: "GetByParams",
			Handler:    _TrackService_GetByParams_Handler,
		},
		{
			MethodName: "GetTopByParams",
			Handler:    _TrackService_GetTopByParams_Handler,
		},
		{
			MethodName: "GetFavoritesByUserID",
			Handler:    _TrackService_GetFavoritesByUserID_Handler,
		},
		{
			MethodName: "UpdateTrack",
			Handler:    _TrackService_UpdateTrack_Handler,
		},
		{
			MethodName: "UpdateTrackAudio",
			Handler:    _TrackService_UpdateTrackAudio_Handler,
		},
		{
			MethodName: "AddToFavourites",
			Handler:    _TrackService_AddToFavourites_Handler,
		},
		{
			MethodName: "DeleteFromFavourites",
			Handler:    _TrackService_DeleteFromFavourites_Handler,
		},
		{
			MethodName: "GetByPlaylistID",
			Handler:    _TrackService_GetByPlaylistID_Handler,
		},
		{
			MethodName: "LikeTrack",
			Handler:    _TrackService_LikeTrack_Handler,
		},
		{
			MethodName: "DislikeTrack",
			Handler:    _TrackService_DislikeTrack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "track.proto",
}
