name: Deploy

on:
  push:
    branches: [ master ]

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.15.x'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Test project
        run: make tests
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.15.x'

      - name: Check out code
        uses: actions/checkout@v2

      - name: Lint Go Code
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          go get github.com/golangci/golangci-lint/cmd/golangci-lint
          make linter
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Build Docker image
        run: docker build -t kudesnjk/musicexpress_deploy:latest .
      - name: Push the image
        run: docker push kudesnjk/musicexpress_deploy:latest
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Pull image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.PRIVATE_KEY }}
          script: docker pull kudesnjk/musicexpress_deploy:latest
      - name: Deploy project
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
           sudo docker rm -f $(sudo docker ps -aq)
           cd 2020_2_CodeExpress/ && docker-compose up -d --force-recreate
